// Debug-Skript f√ºr Navbar-Initialisierungsproblem
// F√ºhre dies in der Browser-Konsole aus

console.log('üîç Debug: Navbar-Initialisierungsproblem');

// Pr√ºfe AuthContext-Initialisierung
function debugAuthInitialization() {
  console.log('üîç Pr√ºfe AuthContext-Initialisierung...');
  
  // Pr√ºfe localStorage
  const token = localStorage.getItem('token');
  const user = localStorage.getItem('user');
  const refreshToken = localStorage.getItem('refreshToken');
  
  console.log('üìä localStorage Status:');
  console.log('- Token:', token ? '‚úÖ Vorhanden' : '‚ùå Fehlt');
  console.log('- User:', user ? '‚úÖ Vorhanden' : '‚ùå Fehlt');
  console.log('- RefreshToken:', refreshToken ? '‚úÖ Vorhanden' : '‚ùå Fehlt');
  
  if (user) {
    try {
      const userData = JSON.parse(user);
      console.log('üë§ User-Daten:', userData);
    } catch (e) {
      console.error('‚ùå User-Daten sind kein g√ºltiges JSON:', e);
    }
  }
  
  // Pr√ºfe aktuelle URL
  console.log('üåê Aktuelle URL:', window.location.href);
  console.log('üìç Pathname:', window.location.pathname);
  
  // Pr√ºfe ob wir auf Login-Seite sind
  const isLoginPage = window.location.pathname === '/login';
  console.log('üîê Auf Login-Seite:', isLoginPage);
  
  return {
    token: !!token,
    user: !!user,
    refreshToken: !!refreshToken,
    isLoginPage,
    currentPath: window.location.pathname
  };
}

// Pr√ºfe React-Komponenten-Status
function debugReactComponents() {
  console.log('üîç Pr√ºfe React-Komponenten-Status...');
  
  // Pr√ºfe AuthProvider
  const reactRoot = document.querySelector('#root');
  if (reactRoot) {
    console.log('‚úÖ React Root gefunden');
    console.log('üì¶ Root Children:', reactRoot.children.length);
    
    // Pr√ºfe ob AuthProvider l√§uft
    const authProviderRunning = reactRoot.children.length > 0;
    console.log('üîß AuthProvider l√§uft:', authProviderRunning);
  } else {
    console.log('‚ùå React Root nicht gefunden');
  }
  
  // Pr√ºfe Navbar-Element
  const navbar = document.querySelector('nav');
  if (navbar) {
    console.log('‚úÖ Navbar gefunden:', navbar);
    console.log('üìè Navbar Sichtbarkeit:', navbar.offsetParent !== null ? 'Sichtbar' : 'Versteckt');
    console.log('üé® Navbar Stile:', window.getComputedStyle(navbar));
  } else {
    console.log('‚ùå Navbar nicht gefunden');
  }
  
  // Pr√ºfe alle nav-Elemente
  const allNavs = document.querySelectorAll('nav');
  console.log(`üìä Anzahl nav-Elemente: ${allNavs.length}`);
  
  return {
    reactRootFound: !!reactRoot,
    authProviderRunning: reactRoot?.children.length > 0,
    navbarFound: !!navbar,
    navbarVisible: navbar?.offsetParent !== null
  };
}

// Pr√ºfe Initialisierungs-Timing
function debugInitializationTiming() {
  console.log('üîç Pr√ºfe Initialisierungs-Timing...');
  
  // Pr√ºfe ob localStorage sofort verf√ºgbar ist
  const immediateToken = localStorage.getItem('token');
  console.log('‚ö° Sofortiger Token-Zugriff:', immediateToken ? '‚úÖ Erfolgreich' : '‚ùå Fehlgeschlagen');
  
  // Pr√ºfe Performance-Timing
  const startTime = performance.now();
  localStorage.getItem('token'); // Test-Zugriff
  const endTime = performance.now();
  console.log(`‚è±Ô∏è localStorage Zugriffszeit: ${(endTime - startTime).toFixed(2)}ms`);
  
  // Pr√ºfe Event-Listener
  console.log('üì° Event-Listener Status:');
  console.log('- DOMContentLoaded:', document.readyState);
  console.log('- Window Load:', window.performance.timing.loadEventEnd > 0 ? 'Abgeschlossen' : 'L√§uft noch');
  
  return {
    immediateAccess: !!immediateToken,
    accessTime: endTime - startTime,
    domReady: document.readyState === 'complete'
  };
}

// Simuliere Seite neu laden
function simulatePageReload() {
  console.log('üîÑ Simuliere Seite neu laden...');
  
  // Speichere aktuelle Daten
  const currentToken = localStorage.getItem('token');
  const currentUser = localStorage.getItem('user');
  
  console.log('üíæ Aktuelle Daten gespeichert:');
  console.log('- Token:', currentToken ? 'Vorhanden' : 'Fehlt');
  console.log('- User:', currentUser ? 'Vorhanden' : 'Fehlt');
  
  // Simuliere localStorage Reset
  console.log('üîÑ Simuliere localStorage Reset...');
  
  // Zeige Anweisungen
  console.log('üìã Anweisungen:');
  console.log('1. Dr√ºcken Sie F5 um die Seite neu zu laden');
  console.log('2. Pr√ºfen Sie die Konsole f√ºr Debug-Ausgaben');
  console.log('3. Die Navbar sollte nach dem Neuladen erscheinen');
  
  return {
    token: currentToken,
    user: currentUser,
    instructions: 'F5 dr√ºcken f√ºr Neuladen'
  };
}

// Umfassender Test
function runInitializationDebug() {
  console.log('üöÄ Starte Initialisierungs-Debug...');
  
  const results = {
    auth: debugAuthInitialization(),
    react: debugReactComponents(),
    timing: debugInitializationTiming()
  };
  
  console.log('üìä Debug-Ergebnisse:', results);
  
  // Empfehlungen basierend auf Ergebnissen
  if (!results.auth.token) {
    console.error('üí° Problem: Kein Token vorhanden - Login erforderlich');
  }
  
  if (!results.auth.user) {
    console.error('üí° Problem: Keine User-Daten vorhanden');
  }
  
  if (!results.react.authProviderRunning) {
    console.error('üí° Problem: AuthProvider l√§uft nicht korrekt');
  }
  
  if (!results.react.navbarFound) {
    console.error('üí° Problem: Navbar-Element nicht im DOM');
  }
  
  if (results.auth.isLoginPage) {
    console.log('‚ÑπÔ∏è Info: Auf Login-Seite - Navbar wird korrekt ausgeblendet');
  }
  
  if (results.timing.accessTime > 10) {
    console.warn('‚ö†Ô∏è Warnung: Langsamer localStorage-Zugriff');
  }
  
  return results;
}

// Automatischer Test
console.log('üîß Debug-Funktionen verf√ºgbar:');
console.log('- debugAuthInitialization() - Pr√ºfe Auth-Initialisierung');
console.log('- debugReactComponents() - Pr√ºfe React-Komponenten');
console.log('- debugInitializationTiming() - Pr√ºfe Timing');
console.log('- simulatePageReload() - Simuliere Neuladen');
console.log('- runInitializationDebug() - Umfassender Test');

// F√ºhre automatischen Test aus
runInitializationDebug(); 